<?php
/**
 * LICENSE: This source file is subject to version 3.0 of the GPL license
 * that is available through the world-wide-web at the following URI:
 * https://www.gnu.org/licenses/gpl-3.0.fr.html (french version).
 *
 * @author      Guillaume Gagnaire <contact@42php.com>
 * @link        https://www.github.com/42php/42php
 * @license     https://www.gnu.org/licenses/gpl-3.0.fr.html GPL
 */

namespace                       Core;

/**
 * Gère la session
 *
 * Class Session
 * @package Core
 */
class 							Session {
    use ConfData;

    /**
     * @var string $expire    Chaîne strtotime() décrivant l'expiration de la session
     */
    public static               $expire = '+30 minutes';

    /**
     * @var mixed               ID de session (false si aucun ID, sinon ID du document MongoDB)
     */
    public static               $id = false;

    /**
     * Initialisation de la session
     */
    public static function      init() {
        Debug::trace();
        /**
         * If it's cookie mode (for web)
         */
        if (isset($_COOKIE['token'])) {
            self::$id = $_COOKIE['token'];
        }

        /**
         * If the session id is transmitted via API (via X-Token header)
         */
        $headers = Http::headers();
        if (isset($headers['X-Token'])) {
            self::$id = $headers['X-Token'];
        }

        /**
         * Clean old sessions
         */
        Db::getInstance()->sessions->remove([
            'expire' => [
                '$lt' => Db::date()
            ]
        ]);

        /**
         * If a session id was transmitted, we try to get data from DB
         */
        if (self::$id !== false) {
            $d = Db::getInstance()->sessions->findOne([
                'token' => self::$id
            ]);
            if (!$d) {
                self::$id = false;
            } else {
                self::$__data = $d['data'];
            }
        }
        self::save();

        register_shutdown_function(function(){
            Session::save();
        });
    }

    /**
     * Création d'une session.
     */
    public static function      create() {
        Debug::trace();
        if (self::$id === false) {
            $d = ['data' => self::$__data, 'token' => Text::random(60, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_'), 'expire' => Db::date(strtotime(self::$expire))];
            Db::getInstance()->sessions->insert($d);
            self::$id = $d['token'];
        }
    }

    /**
     * Enregistrement de la session en base
     */
    public static function      save() {
        Debug::trace();
        $d = ['data' => self::$__data, 'expire' => Db::date(strtotime(self::$expire))];

        if (self::$id === false) {
            self::$id = Text::random(60, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_');
            $d['token'] = self::$id;
            Db::getInstance()->sessions->insert($d);
        } else {
            if (isset($d['id']))
                unset($d['id']);
            Db::getInstance()->sessions->update([
                'token' => self::$id
            ], [
                '$set' => $d
            ]);
        }
        if (!headers_sent()) {
            $domain = Conf::get('cookie.domain', false);
            if (!$domain)
                $domain = $_SERVER['SERVER_NAME'];
            setcookie('token', self::$id, strtotime(self::$expire), '/', $domain, false, false); // The cookie must be accessible by javascript.
        }
    }

    /**
     * Destruction de la session
     */
    public static function      destroy() {
        Debug::trace();
        self::$__data = [];
        if (self::$id !== false) {
            Db::getInstance()->sessions->remove([
                'token' => self::$id
            ]);
            self::$id = false;
        }
        self::save();
    }
}
