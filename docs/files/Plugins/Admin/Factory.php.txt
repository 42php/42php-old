<?php
/**
 * LICENSE: This source file is subject to version 3.0 of the GPL license
 * that is available through the world-wide-web at the following URI:
 * https://www.gnu.org/licenses/gpl-3.0.fr.html (french version).
 *
 * @author      Guillaume Gagnaire <contact@42php.com>
 * @link        https://www.github.com/42php/42php
 * @license     https://www.gnu.org/licenses/gpl-3.0.fr.html GPL
 */

namespace                       Plugins\Admin;

use                             Core\Plugin,
                                Core\Auth,
                                Core\Bundle,
                                Core\Argv,
                                Core\Conf,
                                Core\View;

/**
 * Gère le panneau d'administration
 *
 * Class Factory
 * @package Plugins\Admin
 */
class                           Factory implements \Plugins\Factory {
    /**
     * Stocke l'instance singleton
     *
     * @var null|Factory
     */
    private static              $singleton = null;
    /**
     * Retourne l'instance singleton du panneau d'administration
     *
     * @return Factory          Une instance
     */
    public static function      getInstance() {
        if (is_null(self::$singleton))
            self::$singleton = new self();
        return self::$singleton;
    }

    /**
     * Retourne les éléments du menu de l'administration
     *
     * @return array            Eléments du menu
     */
    private function            getMenu() {
        $menu = [];
        $plugins = Plugin::listPlugins();

        foreach ($plugins as $pluginName) {
            $className = '\\Plugins\\' . $pluginName . '\\Admin';
            if (!class_exists($className))
                continue;
            if (method_exists($className, 'getMenu'))
                $menu[] = $className::getMenu();
        }

        return $menu;
    }

    /**
     * Retourne les routes de chaque plugin
     *
     * @return array
     */
    private function            getRoutes() {
        $routes = [];
        $plugins = Plugin::listPlugins();

        foreach ($plugins as $pluginName) {
            $className = '\\Plugins\\' . $pluginName . '\\Admin';
            if (!class_exists($className))
                continue;
            if (method_exists($className, 'getRoutes')) {
                $ret = $className::getRoutes();
                foreach ($ret as $r) {
                    if (!isset($r['route'], $r['view'], $r['controller']))
                        continue;
                    $routes[] = [
                        'plugin' => $pluginName,
                        'route' => $r['route'],
                        'view' => '/' . ltrim($r['view'], '/'),
                        'controller' => $r['controller'],
                        'controllerAs' => isset($r['controllerAs']) ? $r['controllerAs'] : 'vm'
                    ];
                }
            }
        }

        return $routes;
    }

    /**
     * Charge les fichiers statiques des plugins
     */
    private function            loadPluginStaticFiles() {
        $routes = [];
        $plugins = Plugin::listPlugins();

        foreach ($plugins as $pluginName) {
            $className = '\\Plugins\\' . $pluginName . '\\Admin';
            if (!class_exists($className))
                continue;
            if (method_exists($className, 'loadStaticFiles'))
                $className::loadStaticFiles();
        }
    }

    /**
     * Rend la vue de l'administration
     *
     * @param array $params     Paramètres à passer au plugin
     *
     * @return mixed
     */
    public function             render($params = []) {
        Auth::needConnection(true);

        Bundle::googleFont('Roboto', '300,400,500,700,900');
        Bundle::materialIcons();
        Bundle::angularMaterial();
        Bundle::angularRoute();
        Conf::append('page.css', '/core/Plugins/Admin/css/main.min.css');
        Conf::append('page.css', '/core/Plugins/Admin/css/theme.min.css');
        Conf::append('page.js', '/core/Plugins/Admin/js/app.min.js');
        Conf::append('page.js', '/core/Plugins/Admin/js/Main.min.js');
        Conf::append('page.js', '/core/Plugins/Admin/js/Dashboard.min.js');

        $this->loadPluginStaticFiles();

        Conf::append('page.js', '/core/Plugins/Admin/js/router.min.js');
        return View::render('index', [
            'base' => Argv::createUrl(Conf::get('route.name'), Conf::get('route.params')),
            'menu' => $this->getMenu(),
            'routes' => $this->getRoutes()
        ], __DIR__ . '/views/');
    }
}
